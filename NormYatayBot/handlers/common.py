from aiogram import Dispatcher
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from aiogram.dispatcher import FSMContext
from utils import get_exchange_rate
from keyboards import get_main_keyboard
from .start import send_menu  # –û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –∏–º–ø–æ—Ä—Ç –∏–∑ handlers/start.py

async def show_exchange_rate(message: Message):
    exchange_rate = await get_exchange_rate()
    if exchange_rate:
        await message.answer(f"–ê–∫—Ç—É–∞–ª—å–Ω—ã–π –∫—É—Ä—Å CNY ‚Üí RUB: {exchange_rate:.2f}")
    else:
        await message.answer(
            "‚úñÔ∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å –≤–∞–ª—é—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫—É: @Episthema",
            reply_markup=get_main_keyboard()
        )


async def handle_manager(message: Message):
    key_key = ReplyKeyboardMarkup(resize_keyboard=True)
    key_key.add(KeyboardButton("‚ó∂–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"))
    await message.answer(
        "üìÆ –°–≤—è–∂–∏—Ç–µ—Å—å —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º: @promoutermuhamad",
        reply_markup=key_key
    )

async def handle_back(message: Message):
    await send_menu(message)

async def handle_back_state(message: Message, state: FSMContext):
    await state.finish()
    await send_menu(message)

async def handle_help(message: Message):
    await message.answer(
        "‚òéÔ∏è –ù–∞—à–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∞: @Episthema\n–°–æ–æ–±—â–∞–π—Ç–µ –æ–± –æ—à–∏–±–∫–∞—Ö‚ùóÔ∏è –ü—Ä–µ–¥–ª–∞–≥–∞–π—Ç–µ –Ω–æ–≤–æ–µ‚ùóÔ∏è"
    )

def register_common_handlers(dp: Dispatcher):
    dp.register_message_handler(show_exchange_rate, lambda message: message.text == "–ö—É—Ä—Åüí¥")
    dp.register_message_handler(handle_manager, lambda message: message.text == '–ù–∞–ø–∏—Å–∞—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä—É‚úèÔ∏è')
    dp.register_message_handler(handle_back, lambda message: message.text == '‚ó∂–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
    dp.register_message_handler(handle_back_state, lambda message: message.text == "/back", state='*')
    dp.register_message_handler(handle_help, lambda message: message.text == '/help_tech')
