import sqlite3

from aiogram import Dispatcher
from aiogram.types import Message, CallbackQuery
from aiogram.dispatcher import FSMContext
from config import PASSWORD, CODE
from keyboards import re_keyboard, inline_back, re_opt4, re_opt2, re_opt3, re_delall, promo_type_keyboard, \
    create_pagination_keyboard, re_reklama
from states import Form, AdminActions, PromoCodeStates, SearchStates
from database import get_all_promo_codes, add_promo_code, delete_promo_code, get_user_info, get_all_users, \
    get_total_users, clear_database, get_user_orders, cursor
from datetime import datetime
import logging

admin_pagination = {}

async def cmd_admin(message: Message, state: FSMContext):
    msg = await message.reply("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏:")
    await state.update_data(last_message_id=msg.message_id)
    await Form.admin.set()

async def process_password(message: Message, state: FSMContext):
    user_data = await state.get_data()
    last_message_id = user_data.get('last_message_id')

    if message.text == PASSWORD:
        await message.answer('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å!', reply_markup=re_keyboard)
        if last_message_id:
            try:
                await message.bot.delete_message(chat_id=message.chat.id, message_id=last_message_id)
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∑–∞–ø—Ä–æ—Å–æ–º –ø–∞—Ä–æ–ª—è: {e}")
        try:
            await message.bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø–∞—Ä–æ–ª–µ–º: {e}")
    else:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å. –°–Ω–æ–≤–∞ –≤—ã–±–µ—Ä–∏—Ç–µ /admin –∏–ª–∏ /start")
        if last_message_id:
            try:
                await message.bot.delete_message(chat_id=message.chat.id, message_id=last_message_id)
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∑–∞–ø—Ä–æ—Å–æ–º –ø–∞—Ä–æ–ª—è: {e}")
    await state.finish()

async def process_exit(callback_query: CallbackQuery):
    await callback_query.message.bot.edit_message_text(
        text="–í—ã –≤—ã—à–ª–∏ –∏–∑ –º–µ–Ω—é. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start",
        chat_id=callback_query.message.chat.id,
        message_id=callback_query.message.message_id,
        reply_markup=None
    )

async def process_back(callback_query: CallbackQuery):
    await callback_query.message.bot.edit_message_text(
        text="–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å!",
        chat_id=callback_query.message.chat.id,
        message_id=callback_query.message.message_id,
        reply_markup=re_keyboard
    )

async def process_admin_menu(callback_query: CallbackQuery):
    await callback_query.message.bot.answer_callback_query(callback_query.id)
    button_data = callback_query.data
    chat_id = callback_query.message.chat.id
    message_id = callback_query.message.message_id

    if button_data == 'opt1':
        today = datetime.now().date()
        cursor.execute("SELECT COUNT(*) FROM users WHERE DATE(first_seen) = ?", (today,))
        new_today = cursor.fetchone()[0]
        cursor.execute("SELECT COUNT(*) FROM users WHERE first_seen >= DATE('now', '-30 days')")
        new_month = cursor.fetchone()[0]
        cursor.execute("SELECT COUNT(*) FROM users")
        total_users = cursor.fetchone()[0]
        cursor.execute("SELECT COUNT(*) FROM users WHERE DATE(last_active) = ?", (today,))
        active_today = cursor.fetchone()[0]

        stats_text = (
            "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º:\n"
            f"üë• –ù–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ –¥–µ–Ω—å: {new_today}\n"
            f"üë• –ù–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ –º–µ—Å—è—Ü: {new_month}\n"
            f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n\n"
            f"üë• –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ–≥–æ–¥–Ω—è: {active_today}"
        )

        await callback_query.message.bot.edit_message_text(
            text=stats_text,
            chat_id=chat_id,
            message_id=message_id,
            reply_markup=inline_back
        )
    elif button_data == 'opt2':
        await callback_query.message.bot.edit_message_text(
            text="–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞–º–∏:",
            chat_id=chat_id,
            message_id=message_id,
            reply_markup=re_opt2
        )
    elif button_data == 'opt3':
        await callback_query.message.bot.edit_message_text(
            text="–ü—Ä–æ–±–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID:",
            chat_id=chat_id,
            message_id=message_id,
            reply_markup=re_opt3
        )
    elif button_data == 'opt4':
        await callback_query.message.bot.edit_message_text(
            text="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö:",
            chat_id=chat_id,
            message_id=message_id,
            reply_markup=re_opt4
        )
    elif button_data == 'opt5':
        await callback_query.message.bot.edit_message_text(
            text="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∫–ª–∞–º–æ–π –≤ –±–æ—Ç–µ:",
            chat_id=chat_id,
            message_id=message_id,
            reply_markup=re_reklama
        )

async def process_delete_all(callback_query: CallbackQuery, state: FSMContext):
    await callback_query.message.bot.answer_callback_query(callback_query.id)
    await callback_query.message.bot.edit_message_text(
        text="‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:",
        chat_id=callback_query.message.chat.id,
        message_id=callback_query.message.message_id
    )
    await AdminActions.waiting_for_delete_code.set()
    await state.update_data(
        chat_id=callback_query.message.chat.id,
        message_id=callback_query.message.message_id
    )

async def process_delete_code(message: Message, state: FSMContext):
    user_data = await state.get_data()
    chat_id = user_data['chat_id']
    message_id = user_data['message_id']
    try:
        await message.bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–æ–¥–æ–º: {e}")

    if message.text == CODE:
        clear_database()
        await message.bot.edit_message_text(
            text="‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω–∞!",
            chat_id=chat_id,
            message_id=message_id,
            reply_markup=inline_back
        )
    else:
        await message.bot.edit_message_text(
            text="‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –¥–æ—Å—Ç—É–ø–∞! –û—á–∏—Å—Ç–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.",
            chat_id=chat_id,
            message_id=message_id,
            reply_markup=inline_back
        )
    await state.finish()

async def process_promo_menu(callback_query: CallbackQuery, state: FSMContext):
    await callback_query.message.bot.answer_callback_query(callback_query.id)
    chat_id = callback_query.message.chat.id
    message_id = callback_query.message.message_id

    if callback_query.data == 'allpromo':
        promo_codes = get_all_promo_codes()
        if not promo_codes:
            text = "üìã –°–ø–∏—Å–æ–∫ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ –ø—É—Å—Ç"
        else:
            text = "üìã –°–ø–∏—Å–æ–∫ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤:\n\n"
            for code, discount, max_uses, uses_left in promo_codes:
                text += f"–ö–æ–¥: {code}\n–°–∫–∏–¥–∫–∞: {discount if discount > 0 else '–£—Å–ª—É–≥–∞ 0 RUB'}%\n–ú–∞–∫—Å. –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π: {max_uses}\n–û—Å—Ç–∞–ª–æ—Å—å: {uses_left}\n\n"

        await callback_query.message.bot.edit_message_text(
            text=text,
            chat_id=chat_id,
            message_id=message_id,
            reply_markup=inline_back
        )
    elif callback_query.data == 'addpromo':
        await callback_query.message.bot.edit_message_text(
            text="–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø—Ä–æ–º–æ–∫–æ–¥ (–Ω–∞–ø—Ä–∏–º–µ—Ä, SAVE20):",
            chat_id=chat_id,
            message_id=message_id
        )
        await PromoCodeStates.waiting_for_new_promo.set()
        await state.update_data(chat_id=chat_id, message_id=message_id)
    elif callback_query.data == 'deletepromo':
        await callback_query.message.bot.edit_message_text(
            text="–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
            chat_id=chat_id,
            message_id=message_id
        )
        await PromoCodeStates.waiting_for_delete_promo.set()
        await state.update_data(chat_id=chat_id, message_id=message_id)

async def process_new_promo_code(message: Message, state: FSMContext):
    user_data = await state.get_data()
    chat_id = user_data['chat_id']
    message_id = user_data['message_id']
    promo_code = message.text.strip()

    try:
        await message.bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    if not promo_code.isalnum() or len(promo_code) < 3:
        await message.bot.edit_message_text(
            text="–ü—Ä–æ–º–æ–∫–æ–¥ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã –∏ —Ü–∏—Ñ—Ä—ã –∏ –±—ã—Ç—å –¥–ª–∏–Ω–æ–π –Ω–µ –º–µ–Ω–µ–µ 3 —Å–∏–º–≤–æ–ª–æ–≤!",
            chat_id=chat_id,
            message_id=message_id,
            reply_markup=inline_back
        )
        await state.finish()
        return

    cursor.execute("SELECT code FROM promo_codes WHERE code = ?", (promo_code,))
    if cursor.fetchone():
        await message.bot.edit_message_text(
            text=f"‚ùå –ü—Ä–æ–º–æ–∫–æ–¥ '{promo_code}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!",
            chat_id=chat_id,
            message_id=message_id,
            reply_markup=inline_back
        )
        await state.finish()
        return

    await state.update_data(promo_code=promo_code)
    await PromoCodeStates.waiting_for_promo_type.set()
    await message.bot.edit_message_text(
        text="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø—Ä–æ–º–æ–∫–æ–¥–∞:",
        chat_id=chat_id,
        message_id=message_id,
        reply_markup=promo_type_keyboard
    )

async def process_promo_type(callback_query: CallbackQuery, state: FSMContext):
    await callback_query.message.bot.answer_callback_query(callback_query.id)
    user_data = await state.get_data()
    chat_id = user_data['chat_id']
    message_id = user_data['message_id']
    promo_code = user_data['promo_code']

    if callback_query.data == 'percent_promo':
        await PromoCodeStates.waiting_for_promo_details.set()
        await callback_query.message.bot.edit_message_text(
            text="–í–≤–µ–¥–∏—Ç–µ –¥–µ—Ç–∞–ª–∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n<–ø—Ä–æ—Ü–µ–Ω—Ç —Å–∫–∏–¥–∫–∏> <–º–∞–∫—Å. –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π>\n–ù–∞–ø—Ä–∏–º–µ—Ä: 10 50",
            chat_id=chat_id,
            message_id=message_id
        )
    elif callback_query.data == 'service_promo':
        await PromoCodeStates.waiting_for_service_promo_uses.set()
        await callback_query.message.bot.edit_message_text(
            text="–í–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π –¥–ª—è –ø—Ä–æ–º–æ–∫–æ–¥–∞ —Å–æ —Å–∫–∏–¥–∫–æ–π –Ω–∞ —É—Å–ª—É–≥—É:",
            chat_id=chat_id,
            message_id=message_id
        )
    elif callback_query.data == 'cancel_promo':
        await callback_query.message.bot.edit_message_text(
            text="–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ",
            chat_id=chat_id,
            message_id=message_id,
            reply_markup=inline_back
        )
        await state.finish()

async def process_promo_details(message: Message, state: FSMContext):
    user_data = await state.get_data()
    chat_id = user_data['chat_id']
    message_id = user_data['message_id']
    promo_code = user_data['promo_code']

    try:
        await message.bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    try:
        discount, max_uses = map(float, message.text.split())
        if discount < 0 or max_uses < 0:
            raise ValueError

        add_promo_code(promo_code, discount, int(max_uses))
        await message.bot.edit_message_text(
            text=f"‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ '{promo_code}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!\n–°–∫–∏–¥–∫–∞: {discount}%\n–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π: {int(max_uses)}",
            chat_id=chat_id,
            message_id=message_id,
            reply_markup=inline_back
        )
    except (ValueError, sqlite3.Error) as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞: {e}")
        await message.bot.edit_message_text(
            text="‚ùå –û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: <–ø—Ä–æ—Ü–µ–Ω—Ç> <–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ>",
            chat_id=chat_id,
            message_id=message_id,
            reply_markup=inline_back
        )
    await state.finish()

async def process_service_promo_uses(message: Message, state: FSMContext):
    user_data = await state.get_data()
    chat_id = user_data['chat_id']
    message_id = user_data['message_id']
    promo_code = user_data['promo_code']

    try:
        await message.bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    try:
        max_uses = int(message.text.strip())
        if max_uses <= 0:
            raise ValueError
        add_promo_code(promo_code, 0.0, max_uses)
        await message.bot.edit_message_text(
            text=f"‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ '{promo_code}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!\n–°–∫–∏–¥–∫–∞: –£—Å–ª—É–≥–∞ 0 RUB\n–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π: {max_uses}",
            chat_id=chat_id,
            message_id=message_id,
            reply_markup=inline_back
        )
    except (ValueError, sqlite3.Error) as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å–µ—Ä–≤–∏—Å–Ω–æ–≥–æ –ø—Ä–æ–º–æ–∫–æ–¥–∞: {e}")
        await message.bot.edit_message_text(
            text="‚ùå –û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π",
            chat_id=chat_id,
            message_id=message_id,
            reply_markup=inline_back
        )
    await state.finish()

async def process_delete_promo(message: Message, state: FSMContext):
    user_data = await state.get_data()
    chat_id = user_data['chat_id']
    message_id = user_data['message_id']
    promo_code = message.text.strip()

    try:
        await message.bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    cursor.execute("SELECT code FROM promo_codes WHERE code = ?", (promo_code,))
    if cursor.fetchone():
        delete_promo_code(promo_code)
        await message.bot.edit_message_text(
            text=f"‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ '{promo_code}' —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!",
            chat_id=chat_id,
            message_id=message_id,
            reply_markup=inline_back
        )
    else:
        await message.bot.edit_message_text(
            text=f"‚ùå –ü—Ä–æ–º–æ–∫–æ–¥ '{promo_code}' –Ω–µ –Ω–∞–π–¥–µ–Ω!",
            chat_id=chat_id,
            message_id=message_id,
            reply_markup=inline_back
        )
    await state.finish()

async def process_id_menu(callback_query: CallbackQuery, state: FSMContext):
    await callback_query.message.bot.answer_callback_query(callback_query.id)
    chat_id = callback_query.message.chat.id
    message_id = callback_query.message.message_id
    admin_id = callback_query.from_user.id

    if callback_query.data == 'allid' or callback_query.data.startswith('prev_page_') or callback_query.data.startswith('next_page_'):
        if callback_query.data == 'allid':
            current_page = 0
        elif callback_query.data.startswith('prev_page_'):
            current_page = int(callback_query.data.split('_')[2]) - 1
        elif callback_query.data.startswith('next_page_'):
            current_page = int(callback_query.data.split('_')[2]) + 1
        else:
            current_page = admin_pagination.get(admin_id, 0)

        admin_pagination[admin_id] = current_page
        total_users = get_total_users()
        total_pages = (total_users + 4) // 5
        offset = current_page * 5
        users = get_all_users(offset=offset, limit=5)

        if not users:
            text = "üìã –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—É—Å—Ç"
        else:
            text = f"üìã –°–ø–∏—Å–æ–∫ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö ID (–°—Ç—Ä–∞–Ω–∏—Ü–∞ {current_page + 1} –∏–∑ {total_pages}):\n\n"
            for user_id, first_seen, last_active in users:
                text += f"ID: {user_id}\n–ü–µ—Ä–≤—ã–π –≤—Ö–æ–¥: {first_seen}\n–ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {last_active}\n\n"

        await callback_query.message.bot.edit_message_text(
            text=text,
            chat_id=chat_id,
            message_id=message_id,
            reply_markup=create_pagination_keyboard(current_page, total_pages)
        )
    elif callback_query.data == 'search':
        await callback_query.message.bot.edit_message_text(
            text="–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–æ–∏—Å–∫–∞:",
            chat_id=chat_id,
            message_id=message_id
        )
        await SearchStates.waiting_for_id.set()
        await state.update_data(chat_id=chat_id, message_id=message_id)

async def process_id_search(message: Message, state: FSMContext):
    user_data = await state.get_data()
    chat_id = user_data['chat_id']
    message_id = user_data['message_id']

    try:
        await message.bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    try:
        search_id = int(message.text.strip())
        user = get_user_info(search_id)

        if user:
            orders = get_user_orders(search_id)
            text = (
                f"‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ {search_id}:\n"
                f"–ü–µ—Ä–≤—ã–π –≤—Ö–æ–¥: {user[1]}\n"
                f"–ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {user[2]}\n\n"
                f"–ó–∞—è–≤–∫–∏ ({len(orders)}):\n"
            )

            if orders:
                for order in orders:
                    text += (
                        f"üìç ID –∑–∞—è–≤–∫–∏: {order[0]}\n"
                        f"üìç –¢–∏–ø –¥–æ—Å—Ç–∞–≤–∫–∏: {order[1]}\n"
                        f"üìç –¢–æ–≤–∞—Ä: {order[2]}\n"
                        f"üìç –ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {order[3]}\n"
                        f"üìç –°—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞: {order[4]} CNY\n"
                        f"üìç –í–µ—Å: {order[5] if order[5] else '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
                        f"üìç –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {order[6]} RUB\n"
                        f"üìç –ü—Ä–æ–º–æ–∫–æ–¥: {order[7] if order[7] else '–ù–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω'}\n"
                        f"üìç –°–∫–∏–¥–∫–∞: {order[8]}%\n\n"
                    )
            else:
                text += "–ó–∞—è–≤–æ–∫ –ø–æ–∫–∞ –Ω–µ—Ç\n"
        else:
            text = f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {search_id} –Ω–µ –Ω–∞–π–¥–µ–Ω!"

        await message.bot.edit_message_text(
            text=text,
            chat_id=chat_id,
            message_id=message_id,
            reply_markup=inline_back
        )
    except ValueError:
        await message.bot.edit_message_text(
            text="‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —á–∏—Å–ª–æ–≤–æ–π ID!",
            chat_id=chat_id,
            message_id=message_id,
            reply_markup=inline_back
        )
    except sqlite3.Error as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        await message.bot.edit_message_text(
            text="‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!",
            chat_id=chat_id,
            message_id=message_id,
            reply_markup=inline_back
        )
    await state.finish()

def register_admin_handlers(dp: Dispatcher):
    dp.register_message_handler(cmd_admin, lambda message: message.text == '/admin')
    dp.register_message_handler(process_password, state=Form.admin)
    dp.register_callback_query_handler(process_exit, lambda c: c.data == 'exit')
    dp.register_callback_query_handler(process_back, lambda c: c.data == 'back')
    dp.register_callback_query_handler(process_admin_menu, lambda c: c.data in ['opt1', 'opt2', 'opt3', 'opt4', 'opt5'])
    dp.register_callback_query_handler(process_delete_all, lambda c: c.data == 'deleteall')
    dp.register_message_handler(process_delete_code, state=AdminActions.waiting_for_delete_code)
    dp.register_callback_query_handler(process_promo_menu, lambda c: c.data in ['allpromo', 'addpromo', 'deletepromo'])
    dp.register_message_handler(process_new_promo_code, state=PromoCodeStates.waiting_for_new_promo)
    dp.register_callback_query_handler(process_promo_type, lambda c: c.data in ['percent_promo', 'service_promo', 'cancel_promo'], state=PromoCodeStates.waiting_for_promo_type)
    dp.register_message_handler(process_promo_details, state=PromoCodeStates.waiting_for_promo_details)
    dp.register_message_handler(process_service_promo_uses, state=PromoCodeStates.waiting_for_service_promo_uses)
    dp.register_message_handler(process_delete_promo, state=PromoCodeStates.waiting_for_delete_promo)
    dp.register_callback_query_handler(process_id_menu, lambda c: c.data in ['allid', 'search'] or c.data.startswith('prev_page_') or c.data.startswith('next_page_'))
    dp.register_message_handler(process_id_search, state=SearchStates.waiting_for_id)