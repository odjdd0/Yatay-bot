from aiogram import Dispatcher
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from aiogram.dispatcher import FSMContext
from keyboards import delivery_keyboard, action_keyboard, confirm_keyboard, weight_key, promo_keyboard
from states import Form
from utils import get_exchange_rate
from database import save_order, get_promo_code, update_promo_uses, cursor, get_user_orders
from .start import send_menu
import logging

calculation_data = {}

async def start_order(message: Message):
    await Form.delivery_type1.set()
    await message.answer("üìç–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –¥–æ—Å—Ç–∞–≤–∫–∏üì¶", reply_markup=delivery_keyboard)

async def process_delivery_type(message: Message, state: FSMContext):
    if message.text == "‚óÄÔ∏è–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        await state.finish()
        from handlers.start import send_menu
        await send_menu(message)
        return
    prikol1 = ReplyKeyboardMarkup(resize_keyboard=True)
    prikol1.add(KeyboardButton("–í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤ —é–∞–Ω—è—Öüí¥"))
    prikol1.add(KeyboardButton("‚óÄÔ∏è–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"))
    await state.update_data(delivery_type1=message.text)
    await Form.next()
    await message.answer("üìç–£–∫–∞–∂–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞ –≤ —é–∞–Ω—è—Öüí¥", reply_markup=prikol1)

async def process_product_cost(message: Message, state: FSMContext):
    if message.text == "‚óÄÔ∏è–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        await state.finish()
        from handlers.start import send_menu
        await send_menu(message)
        return
    try:
        cost = float(message.text)
        if cost >= 0:
            await state.update_data(product_cost_cny=cost)
            await Form.next()
            await message.answer("üìç–£–∫–∞–∂–∏—Ç–µ —Ç–∏–ø —Ç–æ–≤–∞—Ä–∞üìç\n", reply_markup=weight_key)
        else:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–µ–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ!")
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, 100.50)!")

async def process_acses(message: Message, state: FSMContext):
    await message.answer("–î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è —Ç–∞–∫–æ–≥–æ —Ç–∏–ø–∞ —Ç–æ–≤–∞—Ä–∞ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –º–µ–Ω–µ–¥–∂–µ—Ä—É: @promoutermuhamad")
    await state.finish()
    from handlers.start import send_menu
    await send_menu(message)

async def process_weight(message: Message, state: FSMContext):
    if message.text == "‚óÄÔ∏è–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        await state.finish()
        from handlers.start import send_menu
        await send_menu(message)
        return
    exchange_rate = await get_exchange_rate()
    if not exchange_rate:
        await message.answer("‚úñÔ∏è–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å –≤–∞–ª—é—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    user_data = await state.get_data()
    delivery_type1 = user_data.get("delivery_type1")

    if message.text == "–û–±—É–≤—å":
        if delivery_type1 == "–ë—ã—Å—Ç—Ä–∞—è –î–æ—Å—Ç–∞–≤–∫–∞ (1-2 –Ω–µ–¥–µ–ª–∏)":
            cost_per_kg = 340
            service_percentage = 0.135
        elif delivery_type1 == "–°–∞–º–∞—è –î–µ—à–µ–≤–∞—è –î–æ—Å—Ç–∞–≤–∫–∞ (3-6 –Ω–µ–¥–µ–ª—å)":
            cost_per_kg = 80
            service_percentage = 0.12
        elif delivery_type1 == "–°–∞–º–∞—è –ë—ã—Å—Ç—Ä–∞—è –î–æ—Å—Ç–∞–≤–∫–∞ (–¥–æ –Ω–µ–¥–µ–ª–∏)":
            cost_per_kg = 410
            service_percentage = 0.15
    elif message.text == "–û–¥–µ–∂–¥–∞":
        if delivery_type1 == "–ë—ã—Å—Ç—Ä–∞—è –î–æ—Å—Ç–∞–≤–∫–∞ (1-2 –Ω–µ–¥–µ–ª–∏)":
            cost_per_kg = 170
            service_percentage = 0.135
        elif delivery_type1 == "–°–∞–º–∞—è –î–µ—à–µ–≤–∞—è –î–æ—Å—Ç–∞–≤–∫–∞ (3-6 –Ω–µ–¥–µ–ª—å)":
            cost_per_kg = 40
            service_percentage = 0.12
        elif delivery_type1 == "–°–∞–º–∞—è –ë—ã—Å—Ç—Ä–∞—è –î–æ—Å—Ç–∞–≤–∫–∞ (–¥–æ –Ω–µ–¥–µ–ª–∏)":
            cost_per_kg = 205
            service_percentage = 0.15

    delivery_cost_cny = cost_per_kg * exchange_rate
    product_cost_rub = user_data["product_cost_cny"] * exchange_rate
    service_cost = 500
    if product_cost_rub >= 5000:
        service_cost = min(4000, max(500, product_cost_rub * service_percentage))

    total_cost_rub = product_cost_rub + delivery_cost_cny + service_cost

    await state.update_data(
        delivery_cost_cny=delivery_cost_cny,
        product_cost_rub=product_cost_rub,
        service_cost=service_cost,
        total_cost_rub_before_discount=total_cost_rub,
        weight=message.text
    )

    calculation_data[message.from_user.id] = {
        "product_cost_cny": user_data["product_cost_cny"],
        "total_cost_rub": total_cost_rub,
        "delivery_type1": delivery_type1,
        "service_cost": service_cost,
        "discount_percentage": 0.0,
        "promo_code": None,
        "weight": message.text
    }

    await Form.promo_code.set()
    await message.answer("üìç–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥ (–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'):", reply_markup=promo_keyboard)

async def process_promo_code(message: Message, state: FSMContext):
    if message.text == "‚óÄÔ∏è–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        await state.finish()
        from handlers.start import send_menu
        await send_menu(message)
        return

    user_data = await state.get_data()
    promo_code = None
    discount_percentage = 0.0
    service_cost = user_data["service_cost"]
    final_total_cost_rub = user_data["total_cost_rub_before_discount"]
    delivery_cost_cny = user_data["delivery_cost_cny"]
    user_id = message.from_user.id

    if message.text != "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
        promo_code = message.text.strip()
        result = get_promo_code(promo_code)

        if result and result[1] > 0:
            discount_percentage = result[0]
            if discount_percentage == 0.0:
                cursor.execute("SELECT COUNT(*) FROM orders WHERE user_id = ? AND promo_code = ?",
                               (user_id, promo_code))
                promo_used_count = cursor.fetchone()[0]

                if promo_used_count == 0:
                    service_cost = 0.0
                    final_total_cost_rub = user_data["product_cost_rub"] + user_data["delivery_cost_cny"]
                    await message.answer(
                        f"‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ '{promo_code}' –ø—Ä–∏–º–µ–Ω–µ–Ω! –°—Ç–æ–∏–º–æ—Å—Ç—å —É—Å–ª—É–≥–∏ –∏ —Å—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏—è (={user_data['service_cost']:.2f} RUB) —É–±—Ä–∞–Ω–∞.")
                else:
                    await message.answer(
                        f"‚ö†Ô∏è –í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –ø—Ä–æ–º–æ–∫–æ–¥ '{promo_code}'. –û–Ω –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑.")
                    promo_code = None
            else:
                discount_amount = (service_cost + delivery_cost_cny) * (discount_percentage / 100)
                final_total_cost_rub -= discount_amount
                await message.answer(f"‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ '{promo_code}' –ø—Ä–∏–º–µ–Ω–µ–Ω! –°–∫–∏–¥–∫–∞ –Ω–∞ —É—Å–ª—É–≥—É: {discount_percentage}%")

            update_promo_uses(promo_code)
        else:
            await message.answer("‚ö†Ô∏è –ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –∏–ª–∏ –∏—Å—á–µ—Ä–ø–∞–Ω. –†–∞—Å—á–µ—Ç –±–µ–∑ —Å–∫–∏–¥–∫–∏.")
    else:
        await message.answer("üìç–ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –ø—Ä–∏–º–µ–Ω–µ–Ω.")

    calculation_data[message.from_user.id].update({
        "total_cost_rub": final_total_cost_rub,
        "service_cost": service_cost,
        "discount_percentage": discount_percentage,
        "promo_code": promo_code
    })

    await message.answer(
        f"üìç–°—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞: {user_data['product_cost_cny']:.2f} CNY (~{user_data['product_cost_rub']:.2f} RUB)\n"
        f"üìç–°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏: {user_data['delivery_cost_cny']:.2f} RUB\n"
        f"üìç–°—Ç–æ–∏–º–æ—Å—Ç—å —É—Å–ª—É–≥–∏ –∏ —Å—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏—è: {service_cost:.2f} RUB\n"
        f"üìç–ü—Ä–æ–º–æ–∫–æ–¥: {promo_code if promo_code else '–ù–µ –ø—Ä–∏–º–µ–Ω–µ–Ω'}\n"
        f"üìç–°–∫–∏–¥–∫–∞: {discount_percentage:.1f}% ({(user_data['total_cost_rub_before_discount'] - final_total_cost_rub):.2f} RUB)\n"
        f"üìç–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {final_total_cost_rub:.2f} RUB\n\n"
        f"–•–æ—Ç–∏—Ç–µ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑‚ùì",
        reply_markup=action_keyboard
    )
    await state.finish()

async def start_application(message: Message):
    await Form.contact_user.set()
    await message.answer("üìí–£–∫–∞–∂–∏—Ç–µ –∫–∞–∫ —Å –≤–∞–º–∏ —Å–≤—è–∑–∞—Ç—å—Å—è:")

async def process_contact_user(message: Message, state: FSMContext):
    key_mes = ReplyKeyboardMarkup(resize_keyboard=True)
    key_mes.add(KeyboardButton("-"))
    input_text = message.text.strip()
    is_telegram = input_text.startswith('@') and len(input_text) > 1 and input_text[1:].isalnum()
    is_phone = input_text.startswith('+') and input_text[1:].isdigit() and len(input_text) >= 7

    if is_telegram or is_phone:
        await state.update_data(contact_user=input_text)
        await Form.next()
        await message.answer(
            "üóÑ–û–ø–∏—à–∏—Ç–µ –¥–µ—Ç–∞–ª–∏ –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞!\n"
            "–£–∫–∞–∂–∏—Ç–µ —Ä–∞–∑–º–µ—Ä, –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∞–º –≤ –¥–∞–ª—å–Ω–µ–π—à–µ–º –∏–∑ –¢–æ–º—Å–∫–∞ –∏ —Ç.–¥.",
            reply_markup=key_mes
        )
    else:
        await message.answer(
            "‚ùóÔ∏è–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ Telegram-—é–∑–µ—Ä–Ω–µ–π–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, @username) –∏–ª–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, +7**********)‚ùóÔ∏è"
        )

async def process_product1(message: Message, state: FSMContext):
    user_data = await state.get_data()
    product = message.text

    user_calculation_data = calculation_data.get(message.from_user.id, {})
    if not user_calculation_data.get("product_cost_cny") or not user_calculation_data.get("delivery_type1"):
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –∑–∞–Ω–æ–≤–æ —á–µ—Ä–µ–∑ '–ö –ø–æ–∫—É–ø–∫–∞–ºüõç'.")
        await state.finish()
        from handlers.start import send_menu
        await send_menu(message)
        return

    product_cost_cny = user_calculation_data.get("product_cost_cny")
    weight = user_calculation_data.get("weight")
    total_cost_rub = user_calculation_data.get("total_cost_rub")
    delivery_type1 = user_calculation_data.get("delivery_type1")

    await state.update_data(
        product=product,
        delivery_type1=delivery_type1,
        product_cost_cny=product_cost_cny,
        weight=weight,
        total_cost_rub=total_cost_rub,
        user_id=message.from_user.id
    )

    application_summary = (
        f"–í–∞—à–∞ –∑–∞—è–≤–∫–∞:\n\n"
        f"üìç–î–æ—Å—Ç–∞–≤–∫–∞ –¥–æ –¢–æ–º—Å–∫–∞: {delivery_type1}\n"
        f"üìç–¢–∏–ø —Ç–æ–≤–∞—Ä–∞: {weight}\n"
        f"üìò–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {user_data['contact_user']}\n"
        f"üóÑ–û–ø–∏—Å–∞–Ω–∏–µ: {product}\n"
        f"üìç–°—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞: {product_cost_cny} CNY\n"
        f"üìç–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {total_cost_rub} RUB\n\n"
        f"–í—ã —Å–æ–≥–ª–∞—Å–Ω—ã —Å —ç—Ç–æ–π –∑–∞—è–≤–∫–æ–π‚ùì"
    )

    await Form.confirm_application.set()
    await message.answer(application_summary, reply_markup=confirm_keyboard)

async def confirm_application(message: Message, state: FSMContext):
    from config import MANAGER_CHAT_ID
    if message.text == "–î–∞, –æ—Ç–ø—Ä–∞–≤–∏—Ç—å‚úÖ":
        user_data = await state.get_data()
        user_calculation_data = calculation_data.get(message.from_user.id, {})
        service_cost = user_calculation_data.get("service_cost", 500)
        promo_code = user_calculation_data.get("promo_code", None)
        discount_percentage = user_calculation_data.get("discount_percentage", 0.0)

        order_id, error = save_order(
            message.from_user.id,
            user_data.get("delivery_type1"),
            user_data["product"],
            user_data["contact_user"],
            user_data.get("product_cost_cny"),
            user_data.get("weight"),
            user_data.get("total_cost_rub"),
            promo_code,
            discount_percentage
        )

        if order_id is not None:
            manager_message = (
                f"–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞!\n"
                f"User ID: {message.from_user.id}\n\n"
                f"ID: {order_id}\n"
                f"–î–æ—Å—Ç–∞–≤–∫–∞1: {user_data.get('delivery_type1')}\n"
                f"–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {user_data['contact_user']}\n"
                f"–¢–æ–≤–∞—Ä: {user_data['product']}\n"
                f"–°—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞: {user_data.get('product_cost_cny')} CNY\n"
                f"–°—Ç–æ–∏–º–æ—Å—Ç—å —É—Å–ª—É–≥–∏: {service_cost:.2f} RUB\n"
                f"–ü—Ä–æ–º–æ–∫–æ–¥: {promo_code if promo_code else '–ù–µ –ø—Ä–∏–º–µ–Ω–µ–Ω'}\n"
                f"–°–∫–∏–¥–∫–∞: {discount_percentage:.1f}%\n"
                f"–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {user_data.get('total_cost_rub')} RUB"
            )

            try:
                await message.bot.send_message(MANAGER_CHAT_ID, manager_message)
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä—É: {e}")
                await message.answer("–ó–∞—è–≤–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä–∞.")

            main_keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
            main_keyboard.add(KeyboardButton("‚óÄÔ∏è–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"))
            main_keyboard.add(KeyboardButton("–ù–∞–ø–∏—Å–∞—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä—É‚úèÔ∏è"))
            await message.answer("–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –º–µ–Ω–µ–¥–∂–µ—Ä—É‚úÖ ", reply_markup=main_keyboard)
            calculation_data.pop(message.from_user.id, None)
        else:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏: {error}")
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–æ–π: @odjdd0")
    elif message.text == "–ù–µ—Ç, –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é‚ùå":
        from handlers.start import send_menu
        await send_menu(message)

    await state.finish()

async def show_applications(message: Message):
    orders = get_user_orders(message.from_user.id)
    if not orders:
        await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞—è–≤–æ–∫‚úñÔ∏è")
        return

    applications_text = "–í–∞—à–∏ –∑–∞—è–≤–∫–∏üñä:\n\n"
    for app in orders:
        applications_text += (
            f"üìçID: {app[0]}\n"
            f"üìç–î–æ—Å—Ç–∞–≤–∫–∞ –¥–æ –¢–æ–º—Å–∫–∞: {app[2]}\n"
            f"üìç–¢–æ–≤–∞—Ä: {app[3]}\n"
            f"üìç–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {app[4]}\n"
            f"üìç–°—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞: {app[5]} CNY\n"
            f"üìç–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {app[7]} RUB\n\n"
        )

    await message.answer(applications_text)

def register_order_handlers(dp: Dispatcher):
    dp.register_message_handler(start_order, lambda message: message.text == '–ö –ø–æ–∫—É–ø–∫–∞–ºüõç')
    dp.register_message_handler(process_delivery_type, lambda message: message.text in ["–°–∞–º–∞—è –ë—ã—Å—Ç—Ä–∞—è –î–æ—Å—Ç–∞–≤–∫–∞ (–¥–æ –Ω–µ–¥–µ–ª–∏)", "–ë—ã—Å—Ç—Ä–∞—è –î–æ—Å—Ç–∞–≤–∫–∞ (1-2 –Ω–µ–¥–µ–ª–∏)", "–°–∞–º–∞—è –î–µ—à–µ–≤–∞—è –î–æ—Å—Ç–∞–≤–∫–∞ (3-6 –Ω–µ–¥–µ–ª—å)", "‚óÄÔ∏è–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"], state=Form.delivery_type1)
    dp.register_message_handler(process_product_cost, state=Form.product_cost)
    dp.register_message_handler(process_acses, lambda message: message.text == "–ê–∫—Å–µ—Å—Å—É–∞—Ä—ã –∏ —Ç–µ—Ö–Ω–∏–∫–∞", state=Form.weight)
    dp.register_message_handler(process_weight, lambda message: message.text in ["–û–±—É–≤—å", "–û–¥–µ–∂–¥–∞", "‚óÄÔ∏è–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"], state=Form.weight)
    dp.register_message_handler(process_promo_code, state=Form.promo_code)
    dp.register_message_handler(start_application, lambda message: message.text == "–°–æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—Éüñä")
    dp.register_message_handler(process_contact_user, state=Form.contact_user)
    dp.register_message_handler(process_product1, state=Form.product_user)
    dp.register_message_handler(confirm_application, lambda message: message.text in ["–î–∞, –æ—Ç–ø—Ä–∞–≤–∏—Ç—å‚úÖ", "–ù–µ—Ç, –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é‚ùå"], state=Form.confirm_application)
    dp.register_message_handler(show_applications, lambda message: message.text == "–ú–æ–∏ –∑–∞—è–≤–∫–∏üìî")